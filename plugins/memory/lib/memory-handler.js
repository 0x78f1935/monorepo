"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.fileExist = exports.noSuchFile = void 0;

var _httpErrors = _interopRequireDefault(require("http-errors"));

var _memoryFs = _interopRequireDefault(require("memory-fs"));

var _streams = require("@verdaccio/streams");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const noSuchFile = 'ENOENT';
exports.noSuchFile = noSuchFile;
const fileExist = 'EEXISTS';
exports.fileExist = fileExist;

const fSError = function (message, code = 404) {
  const err = (0, _httpErrors.default)(code, message);
  err.code = message;
  return err;
};

const noPackageFoundError = function (message = 'no such package') {
  const err = (0, _httpErrors.default)(404, message);
  err.code = noSuchFile;
  return err;
};

const fs = new _memoryFs.default();

class MemoryHandler {
  constructor(packageName, data, logger) {
    _defineProperty(this, "data", void 0);

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "path", void 0);

    _defineProperty(this, "logger", void 0);

    // this is not need it
    this.data = data;
    this.name = packageName;
    this.logger = logger;
    this.path = '/';
  }

  updatePackage(pkgFileName, updateHandler, onWrite, transformPackage, onEnd) {
    let json = this._getStorage(pkgFileName);

    try {
      json = JSON.parse(json);
    } catch (err) {
      return onEnd(err);
    }

    updateHandler(json, err => {
      if (err) {
        return onEnd(err);
      }

      try {
        onWrite(pkgFileName, transformPackage(json), onEnd);
      } catch (err) {
        return onEnd(fSError('error on parse', 500));
      }
    });
  }

  deletePackage(pkgName, callback) {
    delete this.data[pkgName];
    callback(null);
  }

  removePackage(callback) {
    callback(null);
  }

  createPackage(name, value, cb) {
    this.savePackage(name, value, cb);
  }

  savePackage(name, value, cb) {
    try {
      const json = JSON.stringify(value, null, '\t');
      this.data[name] = json;
    } catch (err) {
      cb(fSError(err.message, 500));
    }

    cb(null);
  }

  readPackage(name, cb) {
    const json = this._getStorage(name);

    const isJson = typeof json === 'undefined';

    try {
      cb(isJson ? noPackageFoundError() : null, JSON.parse(json));
    } catch (err) {
      cb(noPackageFoundError());
    }
  }

  writeTarball(name) {
    const uploadStream = new _streams.UploadTarball({});
    const temporalName = `/${name}`;
    process.nextTick(function () {
      fs.exists(temporalName, function (exists) {
        if (exists) {
          return uploadStream.emit('error', fSError(fileExist));
        }

        try {
          const file = fs.createWriteStream(temporalName);
          uploadStream.pipe(file);

          uploadStream.done = function () {
            const onEnd = function () {
              uploadStream.emit('success');
            };

            uploadStream.on('end', onEnd);
          };

          uploadStream.abort = function () {
            uploadStream.emit('error', fSError('transmision aborted', 400));
            file.end();
          };

          uploadStream.emit('open');
        } catch (err) {
          uploadStream.emit('error', err);
        }
      });
    });
    return uploadStream;
  }

  readTarball(name) {
    const pathName = `/${name}`;
    const readTarballStream = new _streams.ReadTarball({});
    process.nextTick(function () {
      fs.exists(pathName, function (exists) {
        if (!exists) {
          readTarballStream.emit('error', noPackageFoundError());
        } else {
          const readStream = fs.createReadStream(pathName);
          readTarballStream.emit('content-length', fs.data[name].length);
          readTarballStream.emit('open');
          readStream.pipe(readTarballStream);
          readStream.on('error', error => {
            readTarballStream.emit('error', error);
          });

          readTarballStream.abort = function () {
            readStream.destroy(fSError('read has been aborted', 400));
          };
        }
      });
    });
    return readTarballStream;
  }

  _getStorage(name = '') {
    return this.data[name];
  }

}

var _default = MemoryHandler;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,